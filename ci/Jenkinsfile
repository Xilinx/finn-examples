pipeline {
  options {
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30'))
  }
  parameters {
    booleanParam(name: 'isRelease', defaultValue: false, description: 'Set this value to true if doing a release test cycle')
    booleanParam(name: 'zcu104-available', defaultValue: false, description: 'Set this value to true if the ZCU104 board is available and configured correctly')
  }
  agent none
  stages {
	stage('Build') {
	  when {
		// beforeAgent set to 'true' to prevent an offline agent hanging the stage
		beforeAgent true
		expression { params['isRelease'] }
	  }
	  agent {
		label 'finn-build'
	  }
	  steps {
		clean_finn_examples_clone()
		dir('build') {
		  sh './get-finn.sh'
		  sh './build-all.sh'
		}
	  }
	}
	stage('Prepare Bitstreams') {
	  when {
		// beforeAgent set to 'true' to prevent an offline agent hanging the stage
		beforeAgent true
		expression { params['isRelease'] }
	  }
	  agent {
		label 'finn-build'
	  }
	  steps {
		dir('build/release') {
		  stash name: "bitfile_stash", includes: "Pynq-Z1.zip,U250.zip,Ultra96.zip,ZCU104.zip"
		}
	  }
	}
	stage('Run Notebooks on Hardware') {
      parallel {
		stage('Test Pynq-Z1 notebooks') {
		  agent {
			label 'finn-pynq'
		  }
		  environment {
			USER_XILINX = credentials('pynq-z1-credentials')
		  }
		  steps {
			clean_finn_examples_clone()

			// For release job: unstash previously generated bitstreams for testing
			// For non-release job: download existing bitstreams for testing
			if (params['isRelease']) {
			  download_data_files()
			  sh 'mkdir -p finn_examples/bitfiles/bitfiles.zip.d'
			  dir('finn_examples/bitfiles/bitfiles.zip.d') {
			    unstash name: "bitfile_stash"
			    sh 'unzip Pynq-Z1.zip'
			  }
			} else {
			  download_all_files('Pynq-Z1')
			}

			// Create a script to run as root on the Pynq-Z1 agent
			create_test_script('pynq_notebooks')

			// Execute the script as the root user - needed for Pynq-Z1
			sh 'echo $USER_XILINX_PSW | sudo -S ./run-tests.sh'
		  }
		  post {
			always {
			  postCleanup()
			}
			failure {
			  postFailure('Pynq-Z1')
			}
			success {
			  postSuccess('Pynq-Z1')
			}
		  }
		}
		stage('Test Ultra96 notebooks') {
		  agent {
			label 'finn-ultra96'
		  }
		  environment {
			USER_XILINX = credentials('pynq-z1-credentials')
		  }
		  steps {
			clean_finn_examples_clone()

			// For release job: unstash previously generated bitstreams for testing
			// For non-release job: download existing bitstreams for testing
			if (params['isRelease']) {
			  download_data_files()
			  sh 'mkdir -p finn_examples/bitfiles/bitfiles.zip.d'
			  dir('finn_examples/bitfiles/bitfiles.zip.d') {
			    unstash name: "bitfile_stash"
			    sh 'unzip Ultra96.zip'
			  }
			} else {
			  download_all_files('Ultra96')
			}

			// Create a script to run as root on the Ultra96 agent
			create_test_script('ultra96_notebooks')

			// Execute the script as the root user - needed for Ultra96
			sh 'echo $USER_XILINX_PSW | sudo -S ./run-tests.sh'
		  }
		  post {
			always {
			  postCleanup()
			}
			failure {
			  postFailure('Ultra96')
			}
			success {
			  postSuccess('Ultra96')
			}
		  }
		}
		stage('Test Alveo U250 notebooks') {
		  agent {
			label 'finn-build-55'
		  }
		  steps {
			clean_finn_examples_clone()

			// For release job: unstash previously generated bitstreams for testing
			// For non-release job: download existing bitstreams for testing
			if (params['isRelease']) {
			  download_data_files()
			  sh 'mkdir -p finn_examples/bitfiles/bitfiles.zip.d'
			  dir('finn_examples/bitfiles/bitfiles.zip.d') {
			    unstash name: "bitfile_stash"
			    sh 'unzip U250.zip'
			    // FIXME: The finn-examples driver expects to see directory 'xilinx_u250_gen3x16_xdma_shell_2_1' or bitstream download fails
				sh 'mv U250 xilinx_u250_gen3x16_xdma_shell_2_1'
			  }
			} else {
			  download_all_files('xilinx_u250_gen3x16_xdma_2_1_202010_1')
              // FIXME: The finn-examples driver expects to see directory 'xilinx_u250_gen3x16_xdma_shell_2_1' or bitstream download fails
			  sh 'mv finn_examples/bitfiles/bitfiles.zip.d/xilinx_u250_gen3x16_xdma_2_1_202010_1 finn_examples/bitfiles/bitfiles.zip.d/xilinx_u250_gen3x16_xdma_shell_2_1'
			}

			// Create a script to run as root on the U250 agent
			create_test_script('alveo_notebooks')

			// Execute the script as the root user - needed for U250
			sh './run-tests.sh'
		  }
		  post {
			always {
			  postCleanup()
			}
			failure {
			  postFailure('U250')
			}
			success {
			  postSuccess('U250')
			}
		  }
		}
		stage('Test ZCU104 notebooks') {
		  when {
		    // beforeAgent set to 'true' to prevent an offline agent hanging the stage
		    beforeAgent true
		    expression { params['zcu104-available'] }
		  }
		  agent {
			label 'finn-zcu104'
		  }
		  environment {
			USER_XILINX = credentials('pynq-z1-credentials')
		  }
		  steps {
			clean_finn_examples_clone()

			// For release job: unstash previously generated bitstreams for testing
			// For non-release job: download existing bitstreams for testing
			if (params['isRelease']) {
			  download_data_files()
			  sh 'mkdir -p finn_examples/bitfiles/bitfiles.zip.d'
			  dir('finn_examples/bitfiles/bitfiles.zip.d') {
			    unstash name: "bitfile_stash"
			    sh 'unzip ZCU104.zip'
			  }
			} else {
			  download_all_files('ZCU104')
			}

			// Create a script to run as root on the ZCU104 agent
			create_test_script('zcu_notebooks')

			// Execute the script as the root user - needed for ZCU104
			sh 'echo $USER_XILINX_PSW | sudo -S ./run-tests.sh'
		  }
		  post {
			always {
			  postCleanup()
			}
			failure {
			  postFailure('ZCU104')
			}
			success {
			  postSuccess('ZCU104')
			}
		  }
		}
	  }
	}
  }
}

void postCleanup() {
  // Delete the created test script
  sh 'rm run-tests.sh'
}

void postFailure(String board) {
  echo "Failed to run ${board} tests"
}

void postSuccess(String board) {
  echo "${board} tests passed"
}

void clean_finn_examples_clone() {
  sh 'rm -rf finn_examples/bitfiles/bitfiles.zip.d'
  sh 'python tests/download-test-files.py -r'
}

void download_data_files() {
  sh 'python tests/download-test-files.py -d'
}

void download_all_files(String board) {
  sh """python tests/download-test-files.py -d -b ${board}"""
}

void create_test_script(String boardNotebooks) {
  // Create the script - stating what set of notebooks to use
  if(boardNotebooks == "alveo_notebooks")
    sh """echo "#!/bin/bash
. /opt/xilinx/xrt/setup.sh
. /home/fionno/anaconda3/bin/activate
python -m pytest -m ${boardNotebooks}" >> run-tests.sh
    """
  else
    sh """echo "#!/bin/bash
. /etc/profile.d/pynq_venv.sh
. /etc/profile.d/xrt_setup.sh
python -m pytest -m ${boardNotebooks}" >> run-tests.sh
    """

  // Give permissions to script
  sh 'chmod 777 run-tests.sh'
}
